// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/26/2024 17:37:20"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          BCD_Counter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module BCD_Counter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg Reset;
// wires                                               
wire Q0;
wire Q1;
wire Q2;
wire Q3;

// assign statements (if any)                          
BCD_Counter i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.Q0(Q0),
	.Q1(Q1),
	.Q2(Q2),
	.Q3(Q3),
	.Reset(Reset)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
initial
begin
	repeat(66)
	begin
		CLK = 1'b0;
		CLK = #7500 1'b1;
		# 7500;
	end
	CLK = 1'b0;
	CLK = #7500 1'b1;
end 

// Reset
initial
begin
	Reset = 1'b1;
	Reset = #160000 1'b0;
	Reset = #120000 1'b1;
end 
endmodule

