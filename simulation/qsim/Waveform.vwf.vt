// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "03/05/2024 16:51:41"
                                                                                
// Verilog Test Bench template for design : HEX2SSD
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module HEX2SSD_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg W;
reg X;
reg Y;
reg Z;
// wires                                               
wire A;
wire B;
wire C;
wire D;
wire D1;
wire D2;
wire D3;
wire D4;
wire E;
wire F;
wire G;

// assign statements (if any)                          
HEX2SSD i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.D4(D4),
	.E(E),
	.F(F),
	.G(G),
	.W(W),
	.X(X),
	.Y(Y),
	.Z(Z)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
                                                       
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

